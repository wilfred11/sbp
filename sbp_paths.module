<?php

/**
 * @file
 * Module file for Search by Page Paths, a sub-module for Search by Page.
 *
 * Allows you to add Drupal pages, such as Views pages, to Search by Page.
 * @ingroup search_by_page
 */

/**
 * Implements Search by Page hook_sbp_paths().
 *
 * Reads path information stored in the database, and returns it.
 */
function sbp_paths_sbp_paths($environment) {

  $min_time = search_by_page_setting_get('sbp_paths_min_time', $environment, 1);
  $max_time = search_by_page_setting_get('sbp_paths_max_time', $environment, 0);

  $res = db_query('SELECT * FROM {sbpp_path} p WHERE p.environment=:env', array(':env' => $environment))->fetchAll();
  $ret = array();

  foreach ($res as $item) {
    // This comes from checkboxes, so it looks like 'en' => 'en', 'es' => 0,
    // etc.
    $languages = @unserialize($item->languages);
    $langs = array();
    if (is_array($languages)) {
      foreach ($languages as $lang => $val) {
        if ($val) {
          $langs[] = $lang;
        }
      }
    }

    $ret[$item->page_path] = array(
      'id' => $item->pid,
      'role' => $item->role,
      'languages' => $langs,
      'min_time' => $min_time,
      'max_time' => $max_time,
    );
  }

  return $ret;
}

/**
 * Implements Search by Page hook_sbp_query_modify().
 *
 * Adds an access permission check to the search query.
 */
function sbp_paths_sbp_query_modify($environment, $query) {
  // Unfortunately, we don't have a wholesale way to check access permissions.
  // So we have to go through all the paths in our table, and check whether the
  // user has permission to see each one, by querying the menu system.
  // Hopefully, there aren't too many! We store them in a temporary table.

  // Create temporary table
  $table = db_query_temporary('SELECT p.pid, 1 as perm FROM {sbpp_path} p WHERE p.environment=:env', array(':env' => $environment));

  // Check permissions on each path, store in temporary table
  $res = db_query('SELECT p.pid, p.page_path FROM {sbpp_path} p WHERE p.environment=:env', array(':env' => $environment))->fetchAll();

  foreach ($res as $item) {
    $parts = search_by_page_path_parts($item->page_path);
    $mitem = menu_get_item($parts[0]);
    if (!$mitem['access']) {
      db_delete($table)
        ->condition('pid', $item->pid)
        ->execute();
    }
  }

  // Join to our temporary table
  $query->leftJoin($table, 'sbpp_p', 'sbpp_p.pid = sp.modid');

  $cond = db_and();
  $cond->condition('sbpp_p.perm', 1);

  return $cond;
}

/**
 * Implements Search by Page hook_sbp_details().
 *
 * Reads details information stored in the database, extracts snippet
 * if necessary, and returns it.
 */
function sbp_paths_sbp_details($id, $environment, $keys = NULL) {

  // Get info from DB

  $item = db_query('SELECT p.pid, p.title, p.page_path, p.page_type, p.snippet FROM {sbpp_path} p WHERE p.pid = :pid', array(':pid' => $id))->fetchObject();

  if (!$item->pid) {
    return NULL;
  }

  // Translate if necessary
  if (module_exists('i18n_string')) {
    $code = 'sbp_paths:path:' . $item->pid . ':';
    $item->title = i18n_string_translate($code . 'title', $item->title);
    $item->page_type = i18n_string_translate($code . 'type', $item->page_type);
    $snip = drupal_strtolower($item->snippet);
    if ($snip != 'yes' && $snip != 'no' && $keys) {
      $item->snippet = i18n_string_translate($code . 'snippet', $item->snippet);
    }
  }

  // Basic page info
  $snippet_title_no_token = token_replace($item->title);
  $ret = array(
    'type' => $item->page_type,
    'title' => search_by_page_strip_tags($snippet_title_no_token, $environment),
  );

  // Snippet -- DB either stores "yes", "no", or a custom snippet to use

  $code = drupal_strtolower($item->snippet);
  if ($code == 'yes' && $keys) {
    $content = search_by_page_stored_page_content('sbp_paths', $id, $environment);
    if ($content) {
      $ret['snippet'] = search_by_page_excerpt($keys, $content);
    }
  }
  elseif ($code != 'no' && $keys) {
    // User-supplied custom snippet
    $snippet_no_token = token_replace($item->snippet);
    $ret['snippet'] = search_by_page_strip_tags($snippet_no_token, $environment);
  }

  return $ret;
}

/**
 * Implements Search by Page hook_sbp_settings().
 *
 * Adds a few settings to the Search by Page settings page.
 */
function sbp_paths_sbp_settings($environment) {

  $form = array();
  $form['sbp_paths'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#weight' => -80,
    '#title' => t('Paths'),
  );

  $times = array(
    '1' => t('1 second'),
    '3600' => t('1 hour'),
    '86400' => t('1 day'),
    '604800' => t('1 week'),
    '31449600' => t('1 year'),
    '0' => t('Never'),
  );

  $form['sbp_paths']['sbp_paths_min_time'] = array(
    '#type' => 'select',
    '#title' => t('Minimum reindexing time'),
    '#options' => $times,
    '#default_value' => search_by_page_setting_get('sbp_paths_min_time', $environment, 1),
    '#weight' => 5,
    '#description' => t("After indexing any new pages added to the environment, Search by Page also cycles through previously-indexed pages, in case the rendered view of the page has changed. On some sites, you may want to limit the amount of reindexing, by setting a minimum time -- the page will not be reindexed until this time has passed."),
  );

  $form['sbp_paths']['sbp_paths_max_time'] = array(
    '#type' => 'select',
    '#title' => t('Maximum reindexing time'),
    '#options' => $times,
    '#default_value' => search_by_page_setting_get('sbp_paths_max_time', $environment, 0),
    '#weight' => 6,
    '#description' => t("Conversely to the minimum reindexing time (see above), Search by Page can be set to prioritize reindexing each page (by marking it as needing immediate reindexing) after this amount of time has passed. This has higher priority than the cycle-through reindexing of the setting above.") .  ' ' . t('But be careful with this setting! If you set it too small, it can interfere with new content being indexed, because the reindexed content will have equal priority to content that has never been indexed. So make sure your settings allow for enough time for new content to be indexed before forcing reindexing.'),
  );

  return $form;
}

/**
 * Implements hook_menu().
 *
 * Defines a tab on Search by Page environment edit that lists the paths
 * to be indexed, with ability to add, edit, and delete them.
 */
function sbp_paths_menu() {

  $items = array();

  $items['admin/config/search/search_by_page/edit/%/paths'] = array(
    'title' => 'Paths',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
    'page callback' => '_sbp_paths_list_page',
    'page arguments' => array(5),
    'access arguments' => array('administer search by page'),
  );

  $items['admin/config/search/search_by_page/edit/%/paths/edit'] = array(
    'title' => 'Edit path',
    'type' => MENU_CALLBACK,
    'page callback' => '_sbp_paths_edit',
    'page arguments' => array(5),
    'access arguments' => array('administer search by page'),
  );

  $items['admin/config/search/search_by_page/edit/%/pagemanager-paths/edit'] = array(
    'title' => 'Edit pagemanager path',
    'type' => MENU_CALLBACK,
    'page callback' => '_sbp_paths_edit_pm_path',
    'page arguments' => array(5),
    'access arguments' => array('administer search by page'),
  );
  
  $items['admin/config/search/search_by_page/edit/%/paths/add'] = array(
    'title' => 'Add path',
    'type' => MENU_CALLBACK,
    'page callback' => '_sbp_paths_edit',
    'page arguments' => array('sbp_paths_delete_confirm', 5),
    'access arguments' => array('administer search by page'),
  );

  $items['admin/config/search/search_by_page/edit/%/pagemanager-paths/add/all'] = array(
    'title' => 'Bulk insert pagemanager paths',
    'type' => MENU_CALLBACK,
    'page callback' =>  'sbp_paths_add_all',
    'page arguments' => array(5),
    'access arguments' => array('administer search by page'),
  );
  
  $items['admin/config/search/search_by_page/edit/%/pagemanager-paths/add/all/confirm'] = array(
    'title' => 'Bulk insert pagemanager paths',
    'type' => MENU_CALLBACK,
    'page callback' =>  'drupal_get_form',
    'page arguments' => array('sbp_paths_add_all_confirm', 5),
    'access arguments' => array('administer search by page'),
  );
  
  $items['admin/config/search/search_by_page/edit/%/pagemanager-paths/delete'] = array(
    'title' => 'Delete pagemanager path',
    'type' => MENU_CALLBACK,
    'page callback' =>  'drupal_get_form',
    'page arguments' => array('sbp_paths_pm_page_delete_confirm', 5),
    'access arguments' => array('administer search by page'),
  );

  $items['admin/config/search/search_by_page/edit/%/paths/delete'] = array(
    'title' => 'Delete path',
    'type' => MENU_CALLBACK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('sbp_paths_delete_confirm', 5),
    'access arguments' => array('administer search by page'),
  );

  return $items;
}

/**
 * Implements hook_i18n_string_info().
 */
function sbp_paths_i18n_string_info() {
  $groups = array();
  $groups['sbp_paths'] = array(
    'title' => t('Search by Page Paths'),
    'description' => t('Path setting text for Search by Page Paths'),
    'format' => FALSE,
    'list' => FALSE,
    'refresh callback' => '_sbp_paths_refresh_all_translations',
  );

  return $groups;
}

/**
 * Refreshes all path info translations.
 */
function _sbp_paths_refresh_all_translations() {
  if (module_exists('i18n_string')) {
    $res = db_query('SELECT * FROM {sbpp_path} p')->fetchAll();
    foreach ($res as $vals) {
      $arr = array(
        'pid' => $vals->pid,
        'title' => $vals->title,
        'type' => $vals->page_type,
        'snippet' => $vals->snippet,
      );
      _sbp_paths_update_translation($arr);
    }
  }
}

/**
 * Page callback for path listings page.
 *
 * Builds a page that lists existing paths to index, with links to edit,
 * delete, and add new.
 */
function _sbp_paths_list_page($environment) {

  $output = '';
  $environment = intval($environment);

  // Overview

  $output .= '<p>' .
    t('This page allows you to define pages on your site to be indexed by the Search by Page module in this environment.') . '</p>' . "\n";

  // Link to add a new path

  $basepath = 'admin/config/search/search_by_page/edit/' . $environment . '/paths/';
  $output .= '<p>' .
    l(t('Add new path'),
      $basepath . 'add') .
    '</p>' . "\n";

  // List existing paths in a table, with edit/delete links
  // and use a pager

  $query = db_select('sbpp_path', 'p')
    ->extend('PagerDefault');
  $query->addField('p', 'pid');
  $query->addField('p', 'page_path');
  $query->addField('p', 'title');
  $query->condition('environment', $environment)
    ->limit(50)
    ->orderBy('page_path');

  $result = $query->execute()->fetchAll();

  $headers = array(t('Path'), t('Title'),
    array('data' => t('Operations'),
      'colspan' => 2));

	  
  $rows = array();
  foreach ($result as $data) {
    $rows[] = array(
      check_plain($data->page_path),
      check_plain($data->title),
      l(t('edit'), $basepath . 'edit/' . $data->pid),
      l(t('delete'), $basepath . 'delete/' . $data->pid),
    );
  }

  $output .= theme('table', array('header' => $headers, 'rows' => $rows));
  $output .='</br>';
  $output .= 'Page manager pages not yet indexed';
  
    // Link to add a new path
  $basepath = 'admin/config/search/search_by_page/edit/' . $environment . '/pagemanager-paths/';
 // $basepath_add = 'admin/config/search/search_by_page/edit/' . $environment . '/pagemanager-paths/add/';
  $output .= '<p>' .
     l(t('Add valid pagemanager paths'),
      $basepath . 'add/all') .
    '</p>' . "\n";
	
  $rows_pm_pages=array();
  // get pm pages, already existing paths will be omitted

  $rows_pm_pages=  _sbp_paths_get_pm_pages($environment);
  $rows_pm_with_links = array();
  $count=0;
  
  foreach ($rows_pm_pages as $row) {
    $rows_pm_with_links[] = array(
      check_plain($row['page_path']),
      check_plain($row['title']),
	  check_plain($row['snippet']),
      l(t('edit'), $basepath . 'edit/' .$count),
      l(t('delete'), $basepath . 'delete/' .$count),
	  );
  	  $count++;
  }
  
 //  sbp_paths_get_pages_metatags_from_page_manager($names_urls)
  
  $headers_pm_pages = array(t('Path'), t('Part of meta title'), t('Meta description'),
    array('data' => t('Operations'),
      'colspan' => 2));
  
  $output .= theme('table', array('header' => $headers_pm_pages, 'rows' =>  $rows_pm_with_links));

  $output .= theme('pager', array('tags' => NULL));
  return $output;
}

/**
 * Edits or adds new path.
 */
function _sbp_paths_edit($environment, $pid = 0) {
  if ($pid) {
    $values = db_query('SELECT * FROM {sbpp_path} p WHERE p.pid = :pid', array(':pid' => $pid))->fetchAssoc();
    $values['languages'] = @unserialize($values['languages']);
    if (!$values['languages']) {
      $values['languages'] = array();
    }
    return drupal_get_form('sbp_paths_edit_form', $values);
  }
  else {
    return drupal_get_form('sbp_paths_edit_form', array('environment' => $environment));
  }
}

/**
 * Edits pagemanager path.
 */
function _sbp_paths_edit_pm_path($environment, $pmp_id ) {
	$values=array();
	$values = _sbp_paths_get_pm_page($pmp_id, $environment);
	$values['pmp_id'] = $pmp_id;
	$values['pm_path'] = TRUE;
	$values['environment']=$environment;
    return drupal_get_form('sbp_paths_edit_form',array('values' => $values), TRUE);
}

/**
 * Returns a form for editing a path item.
 *
 * @ingroup forms
 * @see sbp_paths_edit_form_submit()
 * @pagemanager path or other
 */
function sbp_paths_edit_form($form, &$form_state, $edit = array(), $pm_path = FALSE) {
  global $language;
  if ($pm_path==1) {
	$edit=$edit['values'];
	$edit['pm_path']=$pm_path;
	$edit['role']=1;
  }
  $edit = array_merge(array('pid' => 0, 'page_path' => '', 'title' => '', 'page_type' => 'Page', 'snippet' => 'yes', 'environment' => 0, 'role' => DRUPAL_ANONYMOUS_RID, 'languages' => array()), $edit);
  $edit['environment'] = intval($edit['environment']);

  $form['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Page to index'),
    '#default_value' => $edit['page_path'],
    '#size' => 45,
    '#description' => t('Specify a page on your site that you want to index. Do not include the language prefix, if any.'),
    '#field_prefix' => search_by_page_path_field_prefix(),
    '#required' => TRUE,
  );
  
  $form[$module]['token_help']['help'] = array(
  		'#theme' => 'token_tree',
  		'#token_types' => array($settings->token_type),
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title of page'),
    '#default_value' => $edit['title'],
    '#size' => 45,
    '#description' => t('Title to display in search results for this page. You can use a token'),
    '#required' => TRUE,
  );

  $form['type'] = array(
    '#type' => 'textfield',
    '#title' => t('Type of page'),
    '#default_value' => $edit['page_type'],
    '#size' => 45,
    '#description' => t('Type to display in search results for this page, if the theme displays item types'),
    '#required' => TRUE,
  );

  $form['snippet'] = array(
    '#type' => 'textarea',
    '#title' => t('Snippet'),
    '#default_value' => $edit['snippet'],
    '#cols' => 45,
    '#rows' => 5,
    '#description' => t('Enter "yes" (without the quotes, in English) to show a "snippet" of this page in search results, extracted from the page (it should show a portion of the page that contains the search results). Enter "no" (without the quotes, in English) to omit the snippet entirely. Or, enter any other text to use that custom text as the snippet for search results display0. You can use tokens'),
    '#required' => TRUE,
  );

  if (module_exists('locale')) {
    $form['texthelp'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t("Enter the title, type, and snippet above in your site's default language. If you have a multi-lingual site with the Internationalization project's String Translation module installed and enabled, you can use Drupal's translation interface to translate them.") . '</p>',
    );

    $form['languages'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Languages'),
      '#description' => t('Indicate which languages this page can be viewed in. It will be indexed in each language for searching.'),
      '#options' => locale_language_list('name'),
      '#default_value' => $edit['languages'],
    );
  }
  else {
    $form['languages'] = array(
      '#type' => 'value',
      '#value' => array($language->language => TRUE),
    );
  }

  $form['role'] = array(
    '#type' => 'radios',
    '#title' => t('Role for indexing'),
    '#options' => user_roles(),
    '#default_value' => $edit['role'],
    '#weight' => 4,
    '#description' => t("When Search by Page indexes this page for searching, the page will be viewed from the perspective and permissions of a user with this role."),
  );

  if ($edit['pid']) {
    $form['pid'] = array('#type' => 'value', '#value' => $edit['pid']);
    $form['submit'] = array('#type' => 'submit', '#value' => t('Update indexed page'));
  }
  else {
	  if(!$pm_path) {
		  $form['submit'] = array('#type' => 'submit', '#value' => t('Create new indexed page'));
	  } else {
		 $form['submit'] = array('#type' => 'submit', '#value' => t('Submit changes to pagemanager page list')); 
	  }
  }

  $form['submit']['#weight'] = 5;

  $form['environment'] = array('#type' => 'value', '#value' => $edit['environment']);
  

  if (!$pm_path) {
    $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => "<p>" . l(t('Cancel'),
      'admin/config/search/search_by_page/edit/' . $edit['environment'] . '/paths') . "</p>",
    '#weight' => 6,
  );
  } else {
	$form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => "<p>" . l(t('Cancel'),
      'admin/config/search/search_by_page/edit/' . $edit['environment'] . '/pagemanager-paths') . "</p>",
    '#weight' => 6,
  );
  }
  $form['pmp_id'] = array(
  '#type' => 'hidden',
  '#value' => $edit['pmp_id'],
);
 $form['pm_path'] = array(
  '#type' => 'hidden',
  '#value' => $edit['pm_path'],
);
  return $form;
 }

/**
 * Submit callback for sbp_paths_edit_form().
 *
 * Adds/edits the path to be indexed, and updates database of paths.
 */
function sbp_paths_edit_form_submit($form, &$form_state) {
  $vals = $form_state['values'];
  if ($vals['pm_path']) {
    $envid = intval($vals['environment']);
    sbp_paths_set_pm_paths_path($vals);
  } else {
  $ll=language_list($field = 'langcode');
  $langs = serialize($vals['languages']);
  $envid = intval($vals['environment']);

  // Save the new information
  if (isset($vals['pid']) && $vals['pid']) {
    db_update('sbpp_path')
      ->fields(array(
          'environment' => $envid,
          'page_path' => $vals['path'],
          'title' => $vals['title'],
          'page_type' => $vals['type'],
          'snippet' => $vals['snippet'],
          'role' => $vals['role'],
          'languages' => $langs,
        ))
      ->condition('pid', $vals['pid'])
      ->execute();

    // Force this to be reindexed
    search_by_page_force_reindex('sbp_paths', $vals['pid'], $envid);

  }
  else {
    $vals['pid'] = db_insert('sbpp_path')
      ->fields(array(
          'environment' => $envid,
          'page_path' => $vals['path'],
          'title' => $vals['title'],
          'page_type' => $vals['type'],
          'snippet' => $vals['snippet'],
          'role' => $vals['role'],
          'languages' => $langs,
        ))
      ->execute();
  }
  }
  // Update the translation strings
  if (!$pm_path) {
    _sbp_paths_update_translation($vals);
  }

  if (!$pm_path) {
	// Go back to the paths list
    drupal_set_message(t('The page to index has been saved'));
    $form_state['redirect'] = 'admin/config/search/search_by_page/edit/' . $envid . '/paths';
  } else {
    $form_state['redirect'] = 'admin/config/search/search_by_page/edit/' . $envid . '/paths';
  }
}

/**
 * Returns a form confirming deletion a path to be indexed.
 *
 * @ingroup forms
 * @see sbp_paths_delete_confirm_submit()
 */
function sbp_paths_delete_confirm($form, &$form_state, $environment, $pid) {

  $item = db_query('SELECT p.page_path FROM {sbpp_path} p WHERE p.pid = :pid', array(':pid' => $pid))->fetchObject();

  $environment = intval($environment);
  $form['pid'] = array('#type' => 'value', '#value' => $pid);
  $form['environment'] = array('#type' => 'value', '#value' => $environment);

  return confirm_form($form,
      t('Are you sure you want to stop indexing %path in this environment?',
        array('%path' => $item->page_path)),
    'admin/config/search/search_by_page/edit/' . $environment . '/paths');
}

/**
 * Submit callback for sbp_paths_delete_confirm().
 *
 * Actually deletes the path.
 */
function sbp_paths_delete_confirm_submit($form, &$form_state) {

  if (!$form_state['values']['confirm']) {
    return;
  }

  $pid = $form_state['values']['pid'];
  if (!$pid) {
    return;
  }

  // Remove it from our database, and also from current search index
  db_delete('sbpp_path')
    ->condition('pid', $pid)
    ->execute();

  $environment = intval($form_state['values']['environment']);
  search_by_page_force_remove('sbp_paths', $pid, $environment);

  	unset($_SESSION['sbp_paths']['pm_paths'][$values['environment']]);
  // Go back to paths page
  $form_state['redirect'] = 'admin/config/search/search_by_page/edit/' . $environment . '/paths';
}

/**
 * Implements hook_sbp_delete_environment().
 *
 * Removes the environment from paths database table.
 */
function sbp_paths_sbp_delete_environment($environment) {
  $envid = intval($environment);
  db_delete('sbpp_path')
    ->condition('environment', $envid)
    ->execute();
}

/**
 * Updates the strings to be translated for one path record.
 *
 * @param $vals
 *    Associative array of information from sbpp_path table.
 */
function _sbp_paths_update_translation($vals) {
  if (module_exists('i18n_string') && $vals['pid']) {
    $code = 'sbp_paths:path:' . $vals['pid'] . ':';
    i18n_string_update($code . 'title', $vals['title']);
    i18n_string_update($code . 'type', $vals['type']);
    $snip = drupal_strtolower($vals['snippet']);
    if ($snip != 'yes' && $snip != 'no') {
      i18n_string_update($code . 'snippet', $vals['snippet']);
    }
  }
}

/**
 * Gets pagemanager and combines them with their metatags
 *
 * @param $environment
 *   
 */
function _sbp_paths_get_pm_pages($environment) {
  $pm_pages = array();
  if(!isset($_SESSION['sbp_paths']['pm_paths'][$environment])) {
	$_SESSION['sbp_paths'] = array();
	$_SESSION['sbp_paths']['pm_paths'][$environment] = array();
  
	$existing_paths = get_sbp_paths($environment);
    $names_urls=array();
    $names_urls = get_page_manager_pages_entries($existing_paths);	
    $pm_pages = _sbp_paths_get_pages_metatags_from_page_manager($names_urls);
    $_SESSION['sbp_paths']['pm_paths'][$environment] = $pm_pages;
  } else {
	$pm_pages = $_SESSION['sbp_paths']['pm_paths'][$environment];
  }
  return $pm_pages;
}

/**
 * Get page urls from page manager excluding already existing paths in sbp_paths table
 * Auxilliary function for _sbp_paths_get_pm_pages
 *
 * @param $environment
 *   
 */
function get_page_manager_pages_entries($existing_paths) {
   $query = db_select('page_manager_pages','pmp')
      ->fields('pmp')
	  ->orderBy('name')
      ->execute()
	  ->fetchAll();
	  foreach ($existing_paths as $row) {
		  foreach ($query as $key => $row1) {
			 if($row->page_path==$row1->path) {
				 unset($query[$key]);
			 }
		  }
	  }
	  return array_values($query);
 }
 
 /**
 * Gets metatag description and titel from panel pages
 * Auxilliary function for _sbp_paths_get_pm_pages
 * @param $names_urls
 *    Associative array of information from sbpp_path table.
 */
function _sbp_paths_get_pages_metatags_from_page_manager($names_urls) {
	$langs = serialize($vals['languages']);
	$rows_to_be_added=array();
	$page_panels=array();
	$languages = locale_language_list('langcode');
	$lcodes= array_keys( $languages);
	foreach ($lcodes as $lcode) {
	 $languages[$lcode]=$lcode;
	}
	foreach ($names_urls as $row)  {
		$page_panels[]="page_".$row->name."__panel";
	}

	ctools_include('page', 'page_manager', 'plugins/tasks');
	ctools_include('page_manager.admin', 'page_manager', '');
	ctools_include('export');
	
	$tasks = page_manager_get_tasks_by_type('page');
	$page_types = array();
	foreach ($tasks as $task) {
		$task_pages = page_manager_load_task_handlers($task); 
		foreach ($task_pages as $row1) {
			if(isset($row1)) {
			$row1->name;
			$value = $row1->name;
			$key=null;
			$key = array_search($value,$page_panels);
			$row_to_be_added=array();
			  if(strlen ($key)>0) {
				$meta=array();
				$meta=$row1->conf['metatag_panels']['metatags'];
				$meta1=	$row1->conf['metatag_panels'];
				$row_to_be_added['page_path']=$names_urls[$key]->path;
				$long_title=$meta['title']['value'];
				$short_title = substr($long_title, 0, strpos($long_title, '|'));
				$row_to_be_added['title']=$short_title;
				$row_to_be_added['snippet']=$meta['description']['value'];
				$row_to_be_added['page_type']='Page';
				$row_to_be_added['languages']=$languages;
				$row_to_be_added['role']=1;
				$key=null;
				$rows_to_be_added[]=$row_to_be_added;
			}
		  }
		}
   }
   return $rows_to_be_added;
 }
 
  /**
 * Gets pages in sbp_path table
 * Auxilliary function for _sbp_paths_get_pm_pages
 * @param $environment
 *    Associative array of information from sbpp_path table.
 */
 function get_sbp_paths($environment) {
  $query = db_select('sbpp_path', 'p')
    ->extend('PagerDefault');
  $query->addField('p', 'pid');
  $query->addField('p', 'page_path');
  $query->addField('p', 'title');
  $query->condition('environment', $environment)
    ->limit(50)
    ->orderBy('page_path');
	  $result = $query->execute()->fetchAll();
	return $result;
 }
 

// gets values from a pm page item from session
function _sbp_paths_get_pm_page($key,$environment) {
  $pm_pages=array();
  //$pm_pages =	 _sbp_paths_get_pm_pages($environment);
  $pm_pages = $_SESSION['sbp_paths']['pm_paths'][$environment];
  return $pm_pages[$key];
}

// unused and obsolete
function _sbp_paths_delete_pm_page($key, $environment) {
  $pm_pages = array();
  $pm_pages=_sbp_paths_get_pm_pages($environment);
  unset($pm_pages[$key]);
  $_SESSION['sbp_paths']['pm_paths'][$environment] = array_values($pm_pages);
}

 
  /**
 * Sets edited page in pagemanger page array
 * Auxilliary function for _sbp_paths_get_pm_pages
 * @param $values
 *    Associative array of edited information 
 */
 function sbp_paths_set_pm_paths_path($values) {
  $pmp_id = $values['pmp_id'];
  $values['page_path']=$values['path'];
  unset($values['path']);
  $pm_pages = $_SESSION['sbp_paths']['pm_paths'][$values['environment']];
  $pm_pages[$pmp_id] = $values;
  $_SESSION['sbp_paths']['pm_paths'][$values['environment']] = $pm_pages;
}


  /**
 * Menu callback to list valid pagemanager pages and ask to confirm submision
 * 
 * @param $environment
 *  
 */
 function sbp_paths_add_all($environment, $pid) {
  $environment = intval($environment);
  $basepath = 'admin/config/search/search_by_page/edit/' . $environment . '/pagemanager-paths/add/';
  $rows_pm_paths = array();
  $headers_pm_pages = array();
  $rows_pm_paths = $_SESSION['sbp_paths']['pm_paths'][$environment];
  $rows_to_be_submitted = array();
  $rows_pm = array();
  $output = '';
  $output .= '<p>' . t('This page allows you to bulk add pagemanager pages on your site to be indexed by the Search by Page module in this environment.') . '</p>' . "\n";
  
  foreach ($rows_pm_paths as $row) {
   if (strlen($row['title'])>0 && strlen($row['snippet'])>0 && strlen($row['snippet'])>0 && strlen($row['page_path'])>0 ) {
    $rows_pm[] = array(
      check_plain($row['page_path']),
      check_plain($row['title']),
	  check_plain($row['snippet']),
	  );
	$rows_to_be_submitted[] = $row;
	}
  }
  $headers_pm_pages = array(t('Path'), t('Title'), t('Meta description'),);
  $output .= theme('table', array('header' => $headers_pm_pages, 'rows' =>  $rows_pm));
  $output .= theme('pager', array('tags' => NULL));
  
  $basepath = 'admin/config/search/search_by_page/edit/'.$environment .'/pagemanager-paths/add/all/confirm';
	
	$output .= drupal_render(drupal_get_form('sbp_paths_add_all_confirm', array('values' => $rows_to_be_submitted), TRUE));
   return $output;  
 } 
 
 
 /**
 * Callback for sbp_paths_add_all_confirm().
 *
 * Asks for confirmation to add the valid pagemanager paths to be indexed.
 */
 function sbp_paths_add_all_confirm($form, &$form_state, $rows_to_be_submitted, $environment) {
	$environment = intval($environment); 
	$form['saved_value_1'] = array(
    '#type' => 'value',
    '#value' => $rows_to_be_submitted,
    );
	 $form['saved_value_2'] = array(
    '#type' => 'value',
    '#value' => $environment,
    );

    $form['submit'] = array('#type' => 'submit', '#value' => t('Add all these paths'));
    $form['cancel'] = array(
    '#type' => 'markup',
    '#markup' => "<p>" . l(t('Cancel'),
      'admin/config/search/search_by_page/edit/' . $environment . '/paths') . "</p>",
    '#weight' => 6,
    );

  return $form;
}

/**
 * Submit callback for sbp_paths_add_all_confirm().
 *
 * Adds the valid pagemanager paths to be indexed to sbp_path table
 */
function sbp_paths_add_all_confirm_submit($form, &$form_state) {
	$saved_value_1 = array();
	$environment=$form_state['values']['saved_value_2'];
	$rows=$form_state['values']['saved_value_1']['values'];
	$environment = intval($environment); 
	foreach($rows as $vals) { 
	if (isset($vals['page_type'])) {
		$vals['type']=$vals['page_type'];
	}
      db_insert('sbpp_path')
		  ->fields(array(
			  'environment' => $environment,
			  'page_path' => $vals['page_path'],
			  'title' => $vals['title'],
			  'page_type' => $vals['type'],
			  'snippet' => $vals['snippet'],
			  'role' => $vals['role'],
			  'languages' => serialize($vals['languages']),
			))
		  ->execute();
	}
	drupal_set_message(t('The form has been submitted.'));
	unset($_SESSION['sbp_paths']['pm_paths'][$environment]);
	$form_state['redirect'] = 'admin/config/search/search_by_page/edit/' . $environment . '/paths';
}


/**
 * Returns a form confirming deletion a path to be indexed.
 *
 * @ingroup forms
 * @see sbp_paths_delete_confirm_submit()
 */
function sbp_paths_pm_page_delete_confirm($form, &$form_state, $environment, $pmp_id) {
  $environment = intval($environment);
  $pmp_id = intval($pmp_id);
  $form['pmp_id'] = array('#type' => 'value', '#value' => $pmp_id);
  $form['environment'] = array('#type' => 'value', '#value' => $environment);
  $item = $_SESSION['sbp_paths']['pm_paths'][$environment][$pmp_id];
  unset($_SESSION['sbp_paths']['pm_paths'][$environment][$pmp_id]);

  return confirm_form($form,
      t('Are you sure you want to delete %path from pagemanager pages from this environment?',
        array('%path' => $item['page_path'])),
    'admin/config/search/search_by_page/edit/' . $environment . '/pagemanager-paths');
}

/**
 * Submit callback for sbp_paths_delete_confirm().
 *
 * Actually deletes the path.
 */
function sbp_paths_pm_page_delete_confirm_submit($form, &$form_state) {
  if (!$form_state['values']['confirm']) {
    return;
  }

  $pmp_id = $form_state['values']['pmp_id'];
  if (!$pmp_id) {
    return;
  }

  $environment = intval($form_state['values']['environment']);

  unset($_SESSION['sbp_paths']['pm_paths'][environment][$pmp_id]);
  $pm_paths = array_values($_SESSION['sbp_paths']['pm_paths'][$environment]);
  $_SESSION['sbp_paths']['pm_paths'][$environment] = $pm_paths;
  // Go back to paths page
  $form_state['redirect'] = 'admin/config/search/search_by_page/edit/' . $environment . '/paths';
}